<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Budget Buddy - <%= title %></title>
    <link rel="shortcut icon" href="/images/favicon.svg" type="image/svg+xml">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/styles.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <img src="/images/nerdy-finance-logo-ultra.svg" alt="Budget Buddy Logo">
                <h1>Budget Buddy</h1>
            </div>
            <div class="tagline">
                "Your Wallet Will Thank You"
            </div>
            <nav>
                <ul>
                    <li>
                        <a href="/"><i class="fas fa-home"></i> Dashboard</a>
                    </li>
                    <li class="active">
                        <a href="/income"><i class="fas fa-dollar-sign"></i> Income</a>
                    </li>
                    <li>
                        <a href="/categories"><i class="fas fa-tags"></i> Categories</a>
                    </li>
                    <li>
                        <a href="/expenses"><i class="fas fa-shopping-cart"></i> Expenses</a>
                    </li>
                    <li>
                        <a href="/reports"><i class="fas fa-chart-bar"></i> Reports</a>
                    </li>
                    <li>
                        <a href="/settings"><i class="fas fa-cog"></i> Settings</a>
                    </li>
                </ul>
            </nav>
            <div class="balance-container">
                <div class="current-balance">
                    <h3>CURRENT BALANCE</h3>
                    <h2>RM<%= currentBalance.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></h2>
                    <p><i class="fas fa-arrow-up"></i> <span>5%</span> from last month</p>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <header>
                <div class="header-left">
                    <h2>Budget Buddy</h2>
                </div>
                <div class="header-right">
                    <div class="user-profile">
                        <span><%= typeof user !== 'undefined' ? user.name : 'Hafizan' %></span>
                        <i class="fas fa-user-circle"></i>
                    </div>
                    <a href="/logout" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
                </div>
            </header>

            <div class="content">
                <section id="income-section" class="content-section active-section">
                    <div class="section-header">
                        <h2>Income</h2>
                        <div class="total-income">
                            <i class="fas fa-money-bill-wave"></i> Total: RM<%= totalIncome.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %>
                        </div>
                        <a href="#" class="btn-primary add-new-btn"><i class="fas fa-plus"></i> <span class="btn-text">Add New Income</span></a>
                    </div>

                    <div class="income-content">
                        <div class="income-grid">
                            <div class="income-history">
                                <h3>Income History</h3>
                                <div class="table-responsive">
                                    <table class="data-table">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Source</th>
                                                <th>Description</th>
                                                <th>Amount</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% incomeList.forEach(income => { %>
                                                <tr data-id="<%= income.id %>" data-date="<%= new Date(income.date).toISOString().split('T')[0] %>" data-amount="<%= income.amount %>" data-description="<%= income.description %>">
                                                    <td><%= new Date(income.date).toLocaleDateString() %></td>
                                                    <td><span class="category-badge" style="background-color: <%= income.sourceColor %>"><%= income.source %></span></td>
                                                    <td><%= income.description %></td>
                                                    <td class="amount">RM<%= income.amount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></td>
                                                    <td class="actions">
                                                        <a href="#" class="edit-btn" data-id="<%= income.id %>"><i class="fas fa-edit"></i></a>
                                                        <a href="#" class="delete-btn" data-id="<%= income.id %>"><i class="fas fa-trash"></i></a>
                                                    </td>
                                                </tr>
                                            <% }); %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="income-summary-container">
                            <div class="chart-container">
                                <h3>Income by Source</h3>
                                <canvas id="incomeSourceChart"></canvas>
                            </div>

                            <div class="income-sources">
                                <h3>Income Sources</h3>
                                <ul class="source-list">
                                    <% incomeSources.forEach(source => { %>
                                        <li>
                                            <div style="display: flex; align-items: center; width: 100%;">
                                                <span class="source-color" style="background-color: <%= source.color %>"></span>
                                                <span class="source-name"><%= source.name %></span>
                                            </div>
                                            <span class="source-amount">RM<%= source.amount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) %></span>
                                        </li>
                                    <% }); %>
                                </ul>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>

    <footer>
        <p>Budget Buddy: Your Wallet Will Thank You. Developed by Hafizan.</p>
    </footer>

    <!-- Add Income Modal -->
    <div id="addIncomeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add New Income</h3>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <form id="addIncomeForm" action="/income" method="POST">
                    <div class="form-group">
                        <label for="amount">Amount (RM)</label>
                        <input type="number" id="amount" name="amount" class="form-control" step="0.01" min="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <input type="text" id="description" name="description" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="source">Source</label>
                        <select id="source" name="source" class="form-control dark-select" required>
                            <option value="">Select Income Source</option>
                            <% if (typeof categories !== 'undefined') { %>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            <% } else { %>
                                <option value="salary">Salary</option>
                                <option value="freelance">Freelance</option>
                                <option value="investments">Investments</option>
                            <% } %>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="date">Date</label>
                        <input type="date" id="date" name="date" class="form-control" value="<%= new Date().toISOString().split('T')[0] %>" required>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn-primary">Add Income</button>
                        <button type="button" class="btn-secondary cancel-modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Income Modal -->
    <div id="editIncomeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Income</h3>
                <span class="close-modal edit-close">&times;</span>
            </div>
            <div class="modal-body">
                <form id="editIncomeForm" method="POST">
                    <input type="hidden" id="edit-income-id" name="id">
                    <div class="form-group">
                        <label for="edit-amount">Amount (RM)</label>
                        <input type="number" id="edit-amount" name="amount" class="form-control" step="0.01" min="0.01" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-description">Description</label>
                        <input type="text" id="edit-description" name="description" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-source">Source</label>
                        <select id="edit-source" name="source" class="form-control dark-select" required>
                            <option value="">Select Income Source</option>
                            <% if (typeof categories !== 'undefined') { %>
                                <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                <% }); %>
                            <% } else { %>
                                <option value="salary">Salary</option>
                                <option value="freelance">Freelance</option>
                                <option value="investments">Investments</option>
                            <% } %>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="edit-date">Date</label>
                        <input type="date" id="edit-date" name="date" class="form-control" required>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn-primary">Update Income</button>
                        <button type="button" class="btn-secondary edit-cancel-modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteIncomeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Delete Income</h3>
                <span class="close-modal delete-close">&times;</span>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this income record? This action cannot be undone.</p>
                <form id="deleteIncomeForm" method="POST">
                    <input type="hidden" id="delete-income-id" name="id">
                    <div class="form-actions">
                        <button type="submit" class="btn-danger">Delete</button>
                        <button type="button" class="btn-secondary delete-cancel-modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="/js/script.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Income source chart
            const sourceCtx = document.getElementById('incomeSourceChart').getContext('2d');
            const sourceChart = new Chart(sourceCtx, {
                type: 'doughnut',
                data: {
                    labels: [<% incomeSources.forEach((source, index) => { %>'<%= source.name %>'<%= index < incomeSources.length - 1 ? ',' : '' %><% }); %>],
                    datasets: [{
                        data: [<% incomeSources.forEach((source, index) => { %><%= source.amount %><%= index < incomeSources.length - 1 ? ',' : '' %><% }); %>],
                        backgroundColor: [<% incomeSources.forEach((source, index) => { %>'<%= source.color %>'<%= index < incomeSources.length - 1 ? ',' : '' %><% }); %>],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: window.innerWidth < 768 ? 'bottom' : 'right',
                            labels: {
                                color: '#ffffff',
                                boxWidth: 12,
                                padding: 10
                            }
                        }
                    },
                    layout: {
                        padding: 10
                    },
                    animation: {
                        duration: 500
                    }
                }
            });

            // Modal functionality
            const modal = document.getElementById('addIncomeModal');
            const addBtn = document.querySelector('.add-new-btn');
            const closeBtn = document.querySelector('.close-modal');
            const cancelBtn = document.querySelector('.cancel-modal');

            // Open modal when Add New Income button is clicked
            addBtn.addEventListener('click', function(e) {
                e.preventDefault();
                modal.style.display = 'flex';
                document.body.classList.add('modal-open');
            });

            // Close modal when X button is clicked
            closeBtn.addEventListener('click', function() {
                modal.style.display = 'none';
                document.body.classList.remove('modal-open');
            });

            // Close modal when Cancel button is clicked
            cancelBtn.addEventListener('click', function() {
                modal.style.display = 'none';
                document.body.classList.remove('modal-open');
            });

            // Close modal when clicking outside the modal content
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                    document.body.classList.remove('modal-open');
                }
            });

            // Handle responsive chart layout
            window.addEventListener('resize', function() {
                if (sourceChart) {
                    sourceChart.options.plugins.legend.position = window.innerWidth < 768 ? 'bottom' : 'right';
                    sourceChart.update();
                }
            });

            // Form validation
            const addIncomeForm = document.getElementById('addIncomeForm');
            addIncomeForm.addEventListener('submit', function(e) {
                const amount = document.getElementById('amount').value;
                const description = document.getElementById('description').value;
                const source = document.getElementById('source').value;

                if (!amount || !description || !source) {
                    e.preventDefault();
                    alert('Please fill in all required fields');
                }
            });

            // Edit Income Modal
            const editModal = document.getElementById('editIncomeModal');
            const editCloseBtn = document.querySelector('.edit-close');
            const editCancelBtn = document.querySelector('.edit-cancel-modal');
            const editBtns = document.querySelectorAll('.edit-btn');
            const editForm = document.getElementById('editIncomeForm');

            // Open edit modal when Edit button is clicked
            editBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const incomeId = this.getAttribute('data-id');
                    const row = document.querySelector(`tr[data-id="${incomeId}"]`);

                    // Populate form with income data
                    document.getElementById('edit-income-id').value = incomeId;
                    document.getElementById('edit-amount').value = row.getAttribute('data-amount');
                    document.getElementById('edit-description').value = row.getAttribute('data-description');
                    document.getElementById('edit-date').value = row.getAttribute('data-date');

                    // Find the source name from the row and select it in the dropdown
                    const sourceText = row.querySelector('.category-badge').textContent;
                    const sourceSelect = document.getElementById('edit-source');

                    for (let i = 0; i < sourceSelect.options.length; i++) {
                        if (sourceSelect.options[i].text === sourceText) {
                            sourceSelect.selectedIndex = i;
                            break;
                        }
                    }

                    // Show the modal
                    editModal.style.display = 'flex';
                    document.body.classList.add('modal-open');
                });
            });

            // Close edit modal when X button is clicked
            editCloseBtn.addEventListener('click', function() {
                editModal.style.display = 'none';
                document.body.classList.remove('modal-open');
            });

            // Close edit modal when Cancel button is clicked
            editCancelBtn.addEventListener('click', function() {
                editModal.style.display = 'none';
                document.body.classList.remove('modal-open');
            });

            // Handle edit form submission
            editForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const incomeId = document.getElementById('edit-income-id').value;
                const amount = document.getElementById('edit-amount').value;
                const description = document.getElementById('edit-description').value;
                const source = document.getElementById('edit-source').value;
                const date = document.getElementById('edit-date').value;

                if (!amount || !description || !source || !date) {
                    alert('Please fill in all required fields');
                    return;
                }

                // Send the PUT request
                fetch(`/income/${incomeId}?_method=PUT`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        amount: parseFloat(amount),
                        description,
                        source,
                        date
                    })
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        return response.json();
                    }
                })
                .then(data => {
                    if (data && !data.success) {
                        alert(data.message || 'Failed to update income');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the income');
                });
            });

            // Delete Income Modal
            const deleteModal = document.getElementById('deleteIncomeModal');
            const deleteCloseBtn = document.querySelector('.delete-close');
            const deleteCancelBtn = document.querySelector('.delete-cancel-modal');
            const deleteBtns = document.querySelectorAll('.delete-btn');
            const deleteForm = document.getElementById('deleteIncomeForm');

            // Open delete modal when Delete button is clicked
            deleteBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const incomeId = this.getAttribute('data-id');
                    document.getElementById('delete-income-id').value = incomeId;
                    deleteModal.style.display = 'flex';
                    document.body.classList.add('modal-open');
                });
            });

            // Close delete modal when X button is clicked
            deleteCloseBtn.addEventListener('click', function() {
                deleteModal.style.display = 'none';
                document.body.classList.remove('modal-open');
            });

            // Close delete modal when Cancel button is clicked
            deleteCancelBtn.addEventListener('click', function() {
                deleteModal.style.display = 'none';
                document.body.classList.remove('modal-open');
            });

            // Handle delete form submission
            deleteForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const incomeId = document.getElementById('delete-income-id').value;

                // Send the DELETE request
                fetch(`/income/${incomeId}?_method=DELETE`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({})
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        return response.json();
                    }
                })
                .then(data => {
                    if (data && !data.success) {
                        alert(data.message || 'Failed to delete income');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the income');
                });
            });
        });
    </script>
</body>
</html>
